---
# Source: servicecomb/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sidecar-injector-webhook-mesher-configmap
  namespace: servicecomb
data:
  sidecar_k8s_spec.yaml: |
    containers:
      - name: sidecar-mesher
        image: gomesh/mesher:latest
        imagePullPolicy: Always
        env:
          - name: SERVICE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        ports:
          - containerPort: 30101
        volumeMounts:
          - name: mesher-conf
            mountPath: /tmp
    volumes:
      - name: mesher-conf
        configMap:
          name: mesher-configmap
---
# Source: servicecomb/templates/mesherconfigmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mesher-configmap
  namespace: servicecomb
data:
  chassis.yaml: |
    ---
    cse:
      protocols:
        http:
          listenAddress: 127.0.0.1:30101
      service:
        registry:
          address: http://service-center.servicecomb:30100
          scope: full #set full to be able to discover other app's service
          watch: false # set if you want to watch instance change event
      config:
        client:
          type: apollo			# config_center/apollo
          serverUri: http://apollo.servicecomb:8080
          refreshMode: 1
          refreshInterval: 30
          autodiscovery: false
          serviceName: hybrid-example
          env: DEV
          cluster: default
          namespace: application

---
# Source: servicecomb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mesher-sidecar-injector-service-account
  namespace: servicecomb
  labels:
    app: mesher-sidecar-injector
    chart: sidecarInjectorWebhook
---
# Source: servicecomb/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: mesher-sidecar-injector-mesher-system
  labels:
    app: mesher-sidecar-injector
    chart: sidecarInjectorWebhook
rules:
- apiGroups: ["*"]
  resources: ["namespaces"]
  verbs: ["update", "create", "get", "list", "watch"]
- apiGroups: ["*"]
  resources: ["configmaps"]
  verbs: ["update", "create", "get", "list", "watch"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations"]
  verbs: ["get", "list", "watch", "patch"]
---
# Source: servicecomb/templates/clusterbinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: mesher-sidecar-injector-admin-role-binding-mesher-system
  labels:
    app: mesher-sidecar-injector
    chart: sidecarInjectorWebhook-1.0.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mesher-sidecar-injector-mesher-system
subjects:
  - kind: ServiceAccount
    name: mesher-sidecar-injector-service-account
    namespace: servicecomb
---
# Source: servicecomb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sidecar-injector-webhook-mesher-svc
  namespace: servicecomb
  labels:
    app: sidecar-injector
spec:
  ports:
  - port: 443
    targetPort: 443
  selector:
    app: sidecar-injector

---
# Source: servicecomb/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sidecar-injector-webhook-mesher-deployment
  namespace: servicecomb
  labels:
    app: sidecar-injector
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sidecar-injector
    spec:
      serviceAccountName: mesher-sidecar-injector-service-account
      containers:
        - name: sidecar-injector
          image: gomesh/sidecar-injector:latest
          imagePullPolicy: Always
          args:
            - -sidecarCfgFile=/etc/webhook/mesher/config/sidecar_k8s_spec.yaml
            - -tlsCertFile=/etc/webhook/mesher/certs/ca-cert.pem
            - -tlsKeyFile=/etc/webhook/mesher/certs/ca-key.pem
            - -caFile=/etc/webhook/mesher/certs/root-cert.pem
            - -healthCheckInterval=2s
            - -healthCheckFile=/tmp/healthy
            - -alsologtostderr
            - -v=4
            - 2>&1
#            - /bin/bash
#            - -c
#            - sleep 30; rm -rf /tmp/healthy; sleep 600 --- This is to verify liveness and readiness functionality.
          volumeMounts:
            - name: webhook-certs
              mountPath: /etc/webhook/mesher/certs
              readOnly: true
            - name: webhook-config
              mountPath: /etc/webhook/mesher/config
            - name: mesher-conf
              mountPath: /sc
          livenessProbe:
            exec:
              command:
                - cat
                - /tmp/healthy
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            exec:
              command:
                - cat
                - /tmp/healthy
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: webhook-certs
          secret:
            secretName: sidecar-injector-webhook-mesher-certs
        - name: webhook-config
          configMap:
            name: sidecar-injector-webhook-mesher-configmap
        - name: mesher-conf
          configMap:
            name: mesher-configmap

---
# Source: servicecomb/templates/mutatingwebhook.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: sidecar-injector-webhook-mesher-cfg
  labels:
    app: sidecar-injector
webhooks:
  - name: sidecar-injector.mesher.io
    clientConfig:
      service:
        name: sidecar-injector-webhook-mesher-svc
        namespace: servicecomb
        path: "/webhookmutation"
      caBundle: ""
    rules:
      - operations: [ "CREATE" ]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    namespaceSelector:
      matchLabels:
        sidecar-injector: enabled

---
# Source: service-center/templates/configmap.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-center
  namespace: servicecomb
  labels:
    app: service-center
    chart: service-center-0.1.0
    release: servicecomb
    heritage: Tiller
data:
  app-config: |
    httpaddr = ${HOSTNAME}
    httpport = 30100
    discovery_plugin = etcd
    registry_plugin = embeded_etcd
    self_register = 1
    manager_name = "sr-0"
    manager_addr = "http://127.0.0.1:2380"
    manager_cluster = "sr-0=http://127.0.0.1:2380"
    ssl_mode = 0
    enable_pprof = 1

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-center-frontend
  namespace: servicecomb
  labels:
    app: service-center-frontend
    chart: service-center-0.1.0
    release: servicecomb
    heritage: Tiller
data:
  app-config: |
    frontend_host_ip = ${HOSTNAME}
    frontend_host_port = 30103
    httpaddr = service-center
    httpport = 30100

---
# Source: service-center/templates/rbac.yaml
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: service-center
  namespace: servicecomb
  labels:
    app: service-center
    chart: service-center-0.1.0
    release: servicecomb
    heritage: Tiller


---
# Source: service-center/templates/service.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: service-center
  namespace: servicecomb
  labels:
    app: service-center
    chart: service-center-0.1.0
    release: servicecomb
    heritage: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 30100
      targetPort: 30100

      protocol: TCP
      name: service-center
  selector:
    app: service-center
    release: servicecomb

---
apiVersion: v1
kind: Service
metadata:
  name: service-center-frontend
  namespace: servicecomb
  labels:
    app: service-center-frontend
    chart: service-center-0.1.0
    release: servicecomb
    heritage: Tiller
spec:
  type: NodePort
  ports:
    - port: 30103
      targetPort: 30103

      nodePort: 30103

      protocol: TCP
      name: scfrontend
  selector:
    app: service-center-frontend
    release: servicecomb

---
# Source: service-center/templates/deployment.yaml
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: service-center
  namespace: servicecomb
  labels:
    app: service-center
    chart: service-center-0.1.0
    release: servicecomb
    heritage: Tiller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: service-center
        release: servicecomb
    spec:
      serviceAccountName: service-center
      volumes:
        - name: config
          configMap:
            name: service-center
            items:
            - key: app-config
              path: app.conf
      containers:
        - name: service-center
          image: "servicecomb/service-center:latest"
          imagePullPolicy: Always
          ports:
            - containerPort: 30100
          volumeMounts:
          - name: config
            mountPath: /opt/service-center/conf
            readOnly: false
          livenessProbe:
            httpGet:
              path: /
              port: 30100
          readinessProbe:
            httpGet:
              path: /
              port: 30100
          resources:
            {}


---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: service-center-frontend
  namespace: servicecomb
  labels:
    app: service-center-frontend
    chart: service-center-0.1.0
    release: servicecomb
    heritage: Tiller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: service-center-frontend
        release: servicecomb
    spec:
      volumes:
        - name: config
          configMap:
            name: service-center-frontend
            items:
            - key: app-config
              path: app.conf
      containers:
        - name: service-center-frontend
          image: "servicecomb/scfrontend:latest"
          imagePullPolicy: Always
          ports:
            - containerPort: 30103
          volumeMounts:
          - name: config
            mountPath: /opt/frontend/conf
            readOnly: false
          livenessProbe:
            httpGet:
              path: /
              port: 30103
          readinessProbe:
            httpGet:
              path: /
              port: 30103
          resources:
            {}


---
# Source: service-center/templates/ingress.yaml

